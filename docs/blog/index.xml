<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Amr ElHusseiny&#39;s Blog</title>
    <link>https://amrelhusseiny.github.io/blog/</link>
    <description>Recent content in Blogs on Amr ElHusseiny&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jan 2023 13:50:32 +0200</lastBuildDate><atom:link href="https://amrelhusseiny.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux command cheat sheet</title>
      <link>https://amrelhusseiny.github.io/blog/004_linux_0002_linux_command_cheat_sheet/004_linux_0002_linux_command_cheat_sheet/</link>
      <pubDate>Sun, 01 Jan 2023 13:50:32 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/004_linux_0002_linux_command_cheat_sheet/004_linux_0002_linux_command_cheat_sheet/</guid>
      <description>Table Of Contents Navigation System configuration and stats Boot Interrupts Memory Network ethtool (NIC Info) Navigation Command $ tree DIRECTORY Description show the directory and subdirectorys and file in a tree format Output Sample # tree /sys/kernel/mm/hugepages /sys/kernel/mm/hugepages └── hugepages-2048kB ├── free_hugepages ├── nr_hugepages ├── nr_hugepages_mempolicy ├── nr_overcommit_hugepages ├── resv_hugepages └── surplus_hugepages 1 directory, 6 files System configuration and stats Boot Command $ systemd-analyze blame Description check how much time each services took at bootup of kernel to start Output Sample # systemd-analyze blame 47.</description>
    </item>
    
    <item>
      <title>Linux Networking Part 1 : Kernel Net Stack</title>
      <link>https://amrelhusseiny.github.io/blog/004_linux_0001_understanding_linux_networking/004_linux_0001_understanding_linux_networking_part_1/</link>
      <pubDate>Wed, 21 Dec 2022 15:17:44 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/004_linux_0001_understanding_linux_networking/004_linux_0001_understanding_linux_networking_part_1/</guid>
      <description>Table Of Contents Introduction to series This article in a pinch Part 1 : Linux Network Stack 1) Ring Buffers 2) Socket Buffers (sk_buff) 3) Kernel Interrupts (IRQ vs SoftIRQ) 3) Other quick concepts Network flow in brief Keywords Commands Summary References Introduction to series 1st thing 1st, its very handy to download the uncompiled Linux Kernel code from here https://www.kernel.org.
In this series, we will be exploring the way networking in the server world and how it evolved from using the traditional Linux Kernel Networking stack to network virtualization using OVS and towards handling the load of Telco using NFV and SR-IOV.</description>
    </item>
    
    <item>
      <title>Networks - RPKI , securing BGP Infrastructure</title>
      <link>https://amrelhusseiny.github.io/blog/001_networks_0001_bgp_rpki/001_networks_0001_bgp_rpki/</link>
      <pubDate>Sun, 04 Dec 2022 23:40:47 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/001_networks_0001_bgp_rpki/001_networks_0001_bgp_rpki/</guid>
      <description>Table Of Contents What &amp;amp; Why RPKI (Resource Public Key Infrastructure)? Signing ROAs what is an ROA ? How you deploy ? PDUs Structure (rpki-rtr-pdu) Protocol workings Serial Query/Cache Response Serial Notify End of data Reset Query 1) Setup a Validator steps Allow List 2) Discarding BGP invalids / configuring routers 3) Validating RPKI operations Compulsory Actions to join Introduction What &amp;amp; Why RPKI (Resource Public Key Infrastructure)? BGP is the routing protocol of the Internet backone, but it always lacked a way to validate recieved routes, this opened the protocol up tp some nasty attack of which one of the more popular ones is Route Hijacking in which a peer would falsely or mistakingly advertise some routes as if it is the originator, you can read more about an example of this case in Taiwan&amp;rsquo;s TWNIC hijack in 2019, intentional attack could have resulted in either blackholing the traffic, or driving traffic towards a sniffing device to spy.</description>
    </item>
    
    <item>
      <title>Extending RFC1918 with RFC-6598 (100.64.0.0/10)</title>
      <link>https://amrelhusseiny.github.io/blog/001_networks_0003_extending_rfc_1918/001_networks_0003_extending_rfc_1918/</link>
      <pubDate>Sat, 10 Sep 2022 11:11:25 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/001_networks_0003_extending_rfc_1918/001_networks_0003_extending_rfc_1918/</guid>
      <description>Table Of Contents CGNAT (Carrier Grade NAT) introduction We are all familiar with the RFC-1918 AKA Private IP Spaces (10.x.x.x , 172.16.x.x , 192.168.x.x), called private IP addresses because they can be duplicated by any user as long as the duplicated IP assigned devices does not meet in same L3 network.
But due to the exhaustion of the Public IPv4 space , IANA has assigned a second address space like RFC-1918 , this time though RFC-6598 and its called the Shared Address space since 2012 , while it was originaly intended to be used for CGNAT (Carrier Grade Natting), IANA stated in the standard, that it also can be used in the same manner as RFC-1918 addresses , quoting from RFC-6598:</description>
    </item>
    
    <item>
      <title>Automating DrawIO network topology using Python</title>
      <link>https://amrelhusseiny.github.io/blog/001_networks_0004_drawio_lib/001_networks_0004_drawio_lib/</link>
      <pubDate>Tue, 06 Sep 2022 11:26:44 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/001_networks_0004_drawio_lib/001_networks_0004_drawio_lib/</guid>
      <description>Table Of Contents Generated Topology Intro In this blog , we are going to show how to use the draw_network_plot python library to generate a DrawIO Network topology easily instead of manually drawing them yourself . DrawIO is widely used as a free alternative to Microsoft&amp;rsquo;s Visio to draw network topologies. I will be using Netmiko and CDP to acquire the data needed for the plot for the devices themselves , but this part won&amp;rsquo;t be the focus of the article .</description>
    </item>
    
    <item>
      <title>Understanding networks ASICS - Part 1</title>
      <link>https://amrelhusseiny.github.io/blog/001_networks_0005_understanding_networks_asics/001_networks_0005_understanding_networks_asics_part_1/</link>
      <pubDate>Sun, 04 Sep 2022 11:55:10 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/001_networks_0005_understanding_networks_asics/001_networks_0005_understanding_networks_asics_part_1/</guid>
      <description>Table Of Contents Programmability When is buffer used : When buffer is not used : Routing Engine Forwarding Engine Fabric Processors Backplane Further Broadcom Cisco Mellanox Intel Intro For people working in the planning portion of networks , they will face important decision for whether to expand on an exiting chassis they already are running or whether they are going with a new vendor or model, if this is your first time to do that , what are the questions you need to ask yourself or your vendor ?</description>
    </item>
    
    <item>
      <title>Managing Huawei Cloud_Engine switches using Ansible</title>
      <link>https://amrelhusseiny.github.io/blog/003_cloud_0001_huwawei_cloud_egine_ansible/003_cloud_0001_huwawei_cloud_egine_ansible/</link>
      <pubDate>Thu, 25 Aug 2022 12:19:49 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/003_cloud_0001_huwawei_cloud_egine_ansible/003_cloud_0001_huwawei_cloud_egine_ansible/</guid>
      <description>Table Of Contents what we will be discussing 1- EVE-NG Installation : 2- Huawei Cloud Engine EVE Image : 3- Our lab setup : A) Ansible Machine B) On EVE Portal 4- Setup of the Ansible machine: A)Create a virtual Python environment: B) lets create a simple Inventory and Playbook to run on our current switch : Introduction I have been working with the Huawei Cloud Engine series of switches for the Data Center, and one of the great things I was introduced to is the efficient usage of Ansible+Netconf to configure Legacy network devices instead of the trial and error handling way of Python+SSH , which you had to anticipate the delay of the SSH session and to handle a console output using Regex which while very customizable , when it comes to production environments , your supervisors would much prefer a tried and tested technology backed up by the vendor itself .</description>
    </item>
    
    <item>
      <title>Python&#39;s Netmiko starter template</title>
      <link>https://amrelhusseiny.github.io/blog/001_networks_0006_python_netmiko_template/001_networks_0006_python_netmiko_template/</link>
      <pubDate>Sun, 17 Jul 2022 12:36:51 +0200</pubDate>
      
      <guid>https://amrelhusseiny.github.io/blog/001_networks_0006_python_netmiko_template/001_networks_0006_python_netmiko_template/</guid>
      <description>Table Of Contents Comments on the code : The following is a ready to go netlike template , you just need to choose your way of authentication and the device type , you can find the supported devices on both the documentation and the Git for the Netmiko library :
Netmiko Source Code : Netmiko Github API reference (must check for more functionality) : Netmiko Doc
# netmiko_starter.py from netmiko import ConnectHandler device_dictionary = { &amp;#39;device_type&amp;#39;: &amp;#39;DEVICE_TYPE&amp;#39;, &amp;#39;host&amp;#39;: &amp;#39;DEVICE_IP_ADDRESS&amp;#39;, &amp;#39;username&amp;#39;: &amp;#39;USERNAME&amp;#39;, &amp;#39;password&amp;#39; : &amp;#39;PASSWORD&amp;#39;, # &amp;#39;verbose&amp;#39;: False , # &amp;#39;session_log&amp;#39;: &amp;#39;log.</description>
    </item>
    
  </channel>
</rss>
